import pygame
import random
#___________________________________________________fereastra app
# Initialize Pygame
pygame.init()

# Create screen
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("D&D Meyhem Cards")
#___________________________________________________def carti + random
# Define the Card class
class Card:
    def __init__(self, name, card_type, power, effects):
        self.name = name
        self.card_type = card_type
        self.power = power
        self.effects = effects

    def __repr__(self):
        return f"{self.name} ({self.card_type}, Power: {self.power}, Effects: {self.effects})"

def create_card(name, card_type, power, effects):
    return Card(name, card_type, power, effects)

# Define Blue Deck
blue_deck = [
    create_card("Albastru_1_Attack_1_Fulger", "Mixed", 1, ["Attack", "Fulger"]),
    create_card("Albastru_2_+carte", "Draw", 0, ["Draw 2"]),
    create_card("Albastru_Speciala", "special", 0, ["All playerd_discard_the_decks"]),
    create_card("Albastru_4_Attack", "Attack", 4, ["Attack 4"]),
    create_card("Albastru_3_Attack", "Attack", 3, ["Attack 3"]),
    create_card("Albastru_2_Attack", "Attack", 2, ["Attack 2"]),
    create_card("Albastru_2_Fulger", "Fulger", 2, ["Fulger"]),
    create_card("Albastru_1_viata_1_+carte", "Life", 0, ["+1 Life","Draw 1"]),
    create_card("Albastru_2_life", "Life", 0, ["+2 Life"]),

]

# Define Orange Deck
orange_deck = [
    create_card("Galben_1_Attack_1_Fulger", "Mixed", 1, ["Attack", "Fulger"]),
    create_card("Galben_2_Attack", "Attack", 2, ["Attack 2"]),
    create_card("Galben_Speciala", "Special", 3, ["Attack 3",]),
    create_card("Galben_3_Attack", "Attack", 3, ["Attack 3"]),
    create_card("Galben_1_Fulger_1_Life", "Mixed", 0, ["+1 Life", "Fulger"]),
    create_card("Galben_2_Fulger", "Fulger", 2, ["Fulger 2"]),
    create_card("Galben_3_Life", "Life", 3, ["+3 Life"]),
    create_card("Galben_3_+cards", "Draw", 3, ["Draw 3"]),

    # Add more cards if needed
]

# Shuffle the decks
random.shuffle(blue_deck)
random.shuffle(orange_deck)
#___________________________________________________
#Check length and contents of player_blue
player_blue = blue_deck[:3]
print(f"Player Blue Deck Length: {len(player_blue)}")
print("Player Blue Cards:")
for card in player_blue:
    print(card)

# Check if there are enough cards before accessing them
if len(player_blue) < 3:
    print("Error: Not enough cards in player_blue deck.")
else:
    # Define card positions
    card_positions = [
        {"name": player_blue[0].name, "x": 10, "y": 400},
        {"name": player_blue[1].name, "x": 60, "y": 400},
        {"name": player_blue[2].name, "x": 110, "y": 400}
    ]

    # Load an image for a card
    def get_card_image(card):
        img_path = f"images/{card.name}.jpg"
        try:
            return pygame.image.load(img_path)
        except pygame.error as e:
            print(f"Error loading image {img_path}: {e}")
            return pygame.Surface((100, 150))  # Placeholder surface if image not found

    # Display function for cards
    def display_cards(screen, cards, positions):
        for card, pos in zip(cards, positions):
            image = get_card_image(card)
            screen.blit(image, (pos["x"], pos["y"]))
#
    #######################



    player_orange = orange_deck[:3]
    print(f"Player orange Deck Length: {len(player_orange)}")
    print("Player orange Cards:")
    for card in player_orange:
        print(card)

    # Check if there are enough cards before accessing them
    if len(player_orange) < 3:
        print("Error: Not enough cards in player_orange deck.")
    else:
        # Define card positions
        card_positions = [
            {"name": player_orange[0].name, "x": 220, "y": 400},
            {"name": player_orange[1].name, "x": 270, "y": 400},
            {"name": player_orange[2].name, "x": 320, "y": 400}
        ]


        # Load an image for a card
        def get_card_image(card):
            img_path = f"{card.name}.jpg"
            try:
                return pygame.image.load(img_path)
            except pygame.error as e:
                print(f"Error loading image {img_path}: {e}")
                return pygame.Surface((200, 250))  # Placeholder surface if image not found


        # Display function for cards
        def display_cards(screen, cards, positions):
            for card, pos in zip(cards, positions):
                image = get_card_image(card)
                screen.blit(image, (pos["x"], pos["y"]))
    #
    # ___________________________________________________inchidere joc, probabil
    # Main loop
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        screen.fill((0, 0, 0))
        display_cards(screen, player_blue, card_positions)
        display_cards(screen, player_orange, card_positions)
        pygame.display.flip()



    pygame.quit()

